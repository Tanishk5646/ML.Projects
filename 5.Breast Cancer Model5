{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9601493,"sourceType":"datasetVersion","datasetId":5857632}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tanishktyagi/breast-cancer-model?scriptVersionId=200465496\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd               \nimport numpy as np  \nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-11T12:09:41.064852Z","iopub.execute_input":"2024-10-11T12:09:41.065334Z","iopub.status.idle":"2024-10-11T12:09:41.073221Z","shell.execute_reply.started":"2024-10-11T12:09:41.065289Z","shell.execute_reply":"2024-10-11T12:09:41.071797Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/lab-sheet-5/breast-cancer (1).csv')\nprint(df.head())\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.075728Z","iopub.execute_input":"2024-10-11T12:09:41.07621Z","iopub.status.idle":"2024-10-11T12:09:41.125353Z","shell.execute_reply.started":"2024-10-11T12:09:41.076167Z","shell.execute_reply":"2024-10-11T12:09:41.123918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.126528Z","iopub.execute_input":"2024-10-11T12:09:41.126862Z","iopub.status.idle":"2024-10-11T12:09:41.164491Z","shell.execute_reply.started":"2024-10-11T12:09:41.126824Z","shell.execute_reply":"2024-10-11T12:09:41.162631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 1. Understanding the structure of the dataset\nprint(\"Dataset Information:\")\nprint(df.info())  # Information about data types and missing values\n\nprint(\"\\nSummary Statistics:\")\nprint(df.describe())  # Summary statistics of numerical features\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.166696Z","iopub.execute_input":"2024-10-11T12:09:41.167301Z","iopub.status.idle":"2024-10-11T12:09:41.259463Z","shell.execute_reply.started":"2024-10-11T12:09:41.167226Z","shell.execute_reply":"2024-10-11T12:09:41.25807Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 2. Checking for missing values\nmissing_values = df.isnull().sum()\nprint(\"\\nMissing values in each column:\")\nprint(missing_values)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.262226Z","iopub.execute_input":"2024-10-11T12:09:41.262675Z","iopub.status.idle":"2024-10-11T12:09:41.272001Z","shell.execute_reply.started":"2024-10-11T12:09:41.262628Z","shell.execute_reply":"2024-10-11T12:09:41.270644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 3. Analyzing the distribution of the target variable (assume 'diagnosis' as the target)\nprint(\"\\nTarget variable distribution (Diagnosis):\")\nprint(df['diagnosis'].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.273874Z","iopub.execute_input":"2024-10-11T12:09:41.275019Z","iopub.status.idle":"2024-10-11T12:09:41.285014Z","shell.execute_reply.started":"2024-10-11T12:09:41.274962Z","shell.execute_reply":"2024-10-11T12:09:41.283679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 4. Visualizing some important aspects of the dataset\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.286694Z","iopub.execute_input":"2024-10-11T12:09:41.287132Z","iopub.status.idle":"2024-10-11T12:09:41.297683Z","shell.execute_reply.started":"2024-10-11T12:09:41.287083Z","shell.execute_reply":"2024-10-11T12:09:41.296363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Select only numeric columns for the correlation matrix\nnumeric_df = df.select_dtypes(include=[np.number])\n\n# Visualizing the correlation between numerical features\nplt.figure(figsize=(12, 8))\nsns.heatmap(numeric_df.corr(), annot=False, cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:41.299485Z","iopub.execute_input":"2024-10-11T12:09:41.299984Z","iopub.status.idle":"2024-10-11T12:09:42.144504Z","shell.execute_reply.started":"2024-10-11T12:09:41.299931Z","shell.execute_reply":"2024-10-11T12:09:42.143133Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print the column names to verify\nprint(df.columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:09:42.146301Z","iopub.execute_input":"2024-10-11T12:09:42.146741Z","iopub.status.idle":"2024-10-11T12:09:42.154694Z","shell.execute_reply.started":"2024-10-11T12:09:42.146692Z","shell.execute_reply":"2024-10-11T12:09:42.153076Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Generate the boxplot using the correct column name\nprint(df.columns)\nprint(df[['diagnosis', 'radius_mean']].head())\nsns.boxplot(x='diagnosis', y='radius_mean', data=df)# Replace 'radius_mean' with the actual column name\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:11:16.644933Z","iopub.execute_input":"2024-10-11T12:11:16.645496Z","iopub.status.idle":"2024-10-11T12:11:16.856283Z","shell.execute_reply.started":"2024-10-11T12:11:16.645448Z","shell.execute_reply":"2024-10-11T12:11:16.855089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(6, 4))\nsns.countplot(x='diagnosis', data=df)  # Change 'df=df' to 'data=df'\nplt.title('Count of Diagnosis in Dataset')\nplt.show()\nprint(df.columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:14:22.193421Z","iopub.execute_input":"2024-10-11T12:14:22.194414Z","iopub.status.idle":"2024-10-11T12:14:22.393163Z","shell.execute_reply.started":"2024-10-11T12:14:22.194364Z","shell.execute_reply":"2024-10-11T12:14:22.391695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# 1. Assign Data (Features) and Labels (Target)\n# Assuming 'diagnosis' is the target and the rest are features\n# Replace 'diagnosis' with the actual name of the label column\nX = df.drop(columns=['diagnosis'])  # Features (all columns except 'diagnosis')\ny = df['diagnosis']  # Labels (target)\n\n# 2. Encode the labels (if needed)\n# If 'diagnosis' is categorical (e.g., 'M' and 'B' for malignant and benign), convert it to numerical labels\ny = y.map({'M': 1, 'B': 0})  # Assuming 'M' for malignant and 'B' for benign; adjust if necessary\n\n# 3. Scaling the Data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)  # Standardizing features by removing mean and scaling to unit variance\n\n# 4. Splitting the Data\n# Split the dataset into training (80%) and testing (20%) sets\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n\n# Display shapes of training and testing sets\nprint(\"Training set size:\", X_train.shape)\nprint(\"Test set size:\", X_test.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:15:28.553881Z","iopub.execute_input":"2024-10-11T12:15:28.554423Z","iopub.status.idle":"2024-10-11T12:15:28.577483Z","shell.execute_reply.started":"2024-10-11T12:15:28.554376Z","shell.execute_reply":"2024-10-11T12:15:28.576112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Importing the Naive Bayes classifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# 1. Initialize the Naive Bayes classifier\nmodel = GaussianNB()\n\n# 2. Train the model using the training data\nmodel.fit(X_train, y_train)\n\n# 3. Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# 4. Evaluate the model's performance\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n\n# 5. Print the evaluation metrics\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(f\"Precision: {precision:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:15:59.064838Z","iopub.execute_input":"2024-10-11T12:15:59.065296Z","iopub.status.idle":"2024-10-11T12:15:59.085629Z","shell.execute_reply.started":"2024-10-11T12:15:59.065254Z","shell.execute_reply":"2024-10-11T12:15:59.084352Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay\n\n# 1. Evaluate the model's performance\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n\n# 2. Print the evaluation metrics\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(f\"Precision: {precision:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\n\n# 3. Calculate and display the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Benign (0)', 'Malignant (1)'])\ndisp.plot(cmap='Blues')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T12:16:38.79427Z","iopub.execute_input":"2024-10-11T12:16:38.794772Z","iopub.status.idle":"2024-10-11T12:16:39.066361Z","shell.execute_reply.started":"2024-10-11T12:16:38.794725Z","shell.execute_reply":"2024-10-11T12:16:39.064876Z"},"trusted":true},"execution_count":null,"outputs":[]}]}